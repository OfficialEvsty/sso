# Build and configuration of database image and app Dockerfile in containers
services:
  vault:
    image: hashicorp/vault:latest
    container_name: vault
    entrypoint: /vault/entrypoint.sh
    restart: unless-stopped
    env_file: ".env"
    environment:
      VAULT_ADDR: $VAULT_ADDR
      VAULT_API_ADDR: $VAULT_API_ADDR
      VAULT_ROLE_ID_FILE: "/run/secrets/role_id"
      VAULT_SECRET_ID_FILE: "/run/secrets/secret_id"
    secrets:
      - role_id
      - secret_id
    ports:
      - ${VAULT_PORT}:${VAULT_PORT}
    healthcheck:
      test: wget -q -O - ${VAULT_ADDR}/v1/sys/health || exit 1
      interval: 5s
      timeout: 10s
      retries: 3
    volumes:
      - /internal/storage/protected/vault/entrypoint.sh:/vault/entrypoint.sh # Монтируем скрипт точки входа
      - /internal/storage/protected/vault/scripts:/scripts  # Монтируем скрипт инициализации
    cap_add:
      - IPC_LOCK
    networks:
      - sso-network

  redis:
    image: redis:latest
    container_name: redis_container
    env_file: ".env"
    environment:
      REDIS_PASSWORD: $REDIS_PASSWORD
      EXTERNAL_REDIS_PORT: $EXTERNAL_REDIS_PORT
      REDIS_PORT: $REDIS_PORT
    networks:
      - sso-network
    ports:
      - ${EXTERNAL_REDIS_PORT}:${REDIS_PORT}
  postgres:
    image: postgres:latest
    container_name: postgres_container
    networks:
      - sso-network
    environment:
      POSTGRES_USER: $DB_USER
      POSTGRES_PASSWORD: $DB_PASS
      POSTGRES_DB: $DB_NAME
      EXTERNAL_DB_PORT: $EXTERNAL_DB_PORT
      DB_PORT: $DB_PORT
      PGDATA: "/var/lib/postgresql/data/sso_data"
    ports:
      - ${EXTERNAL_DB_PORT}:${DB_PORT}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d sso_db -U postgres" ]
      interval: 10s
      timeout: 3s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: "0.50"
          memory: 512M
        reservations:
          cpus: "0.25"
          memory: 256M
    command: >
      postgres -c max_connections=1000
                     -c shared_buffers=256MB
                     -c effective_cache_size=768MB
                     -c maintenance_work_mem=64MB
                     -c checkpoint_completion_target=0.7
                     -c wal_buffers=16MB
                     -c default_statistics_target=100
  migrator:
    build:
      context: ./cmd/migrator
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DB_USER: $DB_USER
      DB_PASS: $DB_PASS
      DB_HOST: $DB_HOST
      DB_PORT: $DB_PORT
      DB_NAME: $DB_NAME
    networks:
      - sso-network
  sso:
    build:
      context: .
    depends_on:
      postgres:
        condition: service_healthy
      vault:
        condition: service_healthy
      migrator:
        condition: service_completed_successfully
    environment:
      SSO_PORT: $SSO_PORT
      DB_USER: $DB_USER
      DB_PASS: $DB_PASS
      DB_HOST: $DB_HOST
      DB_PORT: $DB_PORT
      DB_NAME: $DB_NAME
      REDIS_PORT: $REDIS_PORT
      REDIS_HOST: $REDIS_HOST
      REDIS_PASSWORD: $REDIS_PASSWORD
      MAIL_HOST: $MAIL_HOST
      MAIL_PORT: $MAIL_PORT
      WEB_CLIENT_DOMAIN: $WEB_CLIENT_DOMAIN
      WEB_CLIENT_PORT: $WEB_CLIENT_PORT
      VAULT_ADDR: $VAULT_ADDR
    ports:
      - ${SSO_PORT}:${SSO_PORT}
    networks:
      - sso-network
volumes:
  pgdata:
    driver: local
networks:
  sso-network:
    driver: bridge
secrets:
  role_id:
    file: ./secrets/role_id.txt
  secret_id:
    file: ./secrets/secret_id.txt